JWT  -  json web token   ( userid - is encoded and given to the user, the client gives the password to the server
server receive JWT to be sure that the client is authenticated
1. Install Flask_JWT
2. Set secret_key to application
import os
# >>> os.urandom(24)
3. Create new file security.py ( define func authenticate and identity
4. Create new file user.py : create class User in it
5. Import class User to security.py
6. Create instance jwt   -  Import JWT, authenticate, identity
create endpoint /auth
we can send jwt with request and app checks that the client is authenticated
7. import decorator jwt_required to give access to the Resource functions only if the user is authenticated
set this decorator to the function get(self, name) of Item(Resource)
8. Receive JWT token  -  make POST request to the endpoint /auth ( header set -  Content-Type: application/json)
 Body: {"username":"bob", "password":"asdf"}  ??? why without id ???
 we received {"access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.
 eyJleHAiOjE2MTY4MzU2NjQsImlhdCI6MTYxNjgzNTM2NCwibmJmIjoxNjE2ODM1MzY0LCJpZGVudGl0eSI6MX0.
 qOnJ_4_pSXCy8nrM4t7FDUxMGeXKQBtaNxh_jfyxoXA"} in response
If we try to receive item by name from get we receive following response:
{
    "description": "Request does not contain an access token",
    "error": "Authorization Required",
    "status_code": 401
}
To have access to the item we need to copy access token and mention in header
 Authorization: JWT eyJ0eXAiOiJKV1QiLCJhbGciO..... after that we receive access to any item by name
9. Using regparse for checking data
9.1 import reqparse from flask_restful
9.2 correct put function to make sure that only float value with key "price" was given in the body.
9.3. update post function with parser
9.4. make parser as Class Varuable.
10. Using db sqlite for storing and retrieving users
10.1. Add 2 class methods to the class User: find_by_username(cls, username), ind_by_id(cls, _id)
10.2. Correct authenticate and identity function in security.py
10.3. Test.py  -  file with connectin to dp and requests for:
-create table users
-add several users to users table of db
- retrieve all the users from db and print them to check that they were added
11. Testing how it works from postman:
- POST request from /auth with body (name and password of the user that was add to db
- receive JWT in response
- GET response ( adding token to the headers) to receive one of item.
12. Create file (create_tables.py):
-import db, connection, cursor, query to create users table with incrementing id, commit and close connectin.
13.user.py -  create new class UserRegister(Resource)
- with parser that have 2 args username and password
- post method to create new user to the database with autoincrement id,
username and password from the client adding it to db.
14. Delete previous db and run create_tables.py to create new db. (vide0 81)
- run app.py
- add new user to db from /register resourse (post request)
- receive JWT input username and password in /auth ( post request),
- get request /item/<name> (add JWT at athorisation in headers).
15. Preventing duplicate of usernames ( video 82) - corectin in UserRegister method post
16. Retrieving items from the Database
16.1.remove items from app.py ( list) and create new file -  item.py
16.2 move classes Item and ItemList from app.py to item.py, clean imports
16.3. add correct imports in item.py and start to correct methods of Classes Item and ItemList
(for work with db instead of list items ).
16.3.1. Class Item, method get.
- Create new table items in create_tables.py and insert test_item
- delete old db to create new one with 2 tables ( users and items)
17. Adding items to db -  Class Item method post (video 84)
18. Deleting item from Db Class Item method delete (video 85)
19. Update item in db  Class Item method put
19.1 Extract code from method to put to separate method that will be used for put also ( DRY )  - video 86
@classmethod    def insert(cls, item)
19.2 Reformat method put using classmethod insert
19.3. Create classmethod def update(cls, item), reformat method put using both insert and update classmethods.
20. Reformat class ItemList
21. Save code with tag sql_crude

======================================================================

Section 6: Simplifying storage with Flask-SQLAlchemy

6.1 Reformat files ( separate Models and Resources without using sqlachemy)
DIRECTORY 3.code_sql_crude_reformed

1. Reformat directories and create directory 3.code_sql_alchemy for current version of the project
1.1. We need following files from previouse version:
app.py, create_tables.py, item.py, security.py, user.py
1.2. pip install Flask-SQLAlchemy, create requrement.txt for new project

2. Improving the project structure and its maitainability (video 92)
2.1. Create 2 packages: models and resources
2.2. Move files that contain class Resources to resources package ( item.py, user.py),
we will remove class User from user.py later as it is not a Resource class
correct imports files: app.py, security.py

3. Create User and Item models (video 93):
3.1. Create file user.py in the package models and move class User to it from user.py in resource package
rename class User to UserModel
correct imports and change User to UserModel everywhere
3.2. Create item.py in the package models, create class ItemModel in it.
class ItemModel:
    def __init__(self, name, price):
        self.name = name
        self.price = price

    def json(self):
        return {"name": self.name, "price": self.price}

3.3 Move class methods from Item(Resource) to class ItemModel:
@classmethod
    def find_by_name(cls, name):    # is class method as constructor
def insert(self):  # become instance method
def update(self):   # become instance method
3.4. Correct resources\item.py  -  change classmethods(insert and update) to instance methods
change return instead of item as dict to item.json()
3.5. Tesing corrected app in postman. Create new collections in postman,
section 6.
4. Advance postman usage( video - 95):
4.1. Create enviroments for section 6:
set for key url value http://127.0.0.1:5000 and change in the request of section 6 {{url}}
4.2.Set for key jwt_token value of actual jwt token in the header of request
4.3. /auth  -  Tests:
var jsonData = JSON.parse(responseBody) - set var jsonData ( receive data from response from server -  JWT token
tests["Aceess token is not empty"] = jsonData.access_token !== undefined; - test if JWT token is not empty
pm.environment.set("jwt_token", jsonData.access_token); setting for environment value current JWT token automatically
we can check also status code of response, time of response and use other snippets for testing.

6.2. Using SQLAlchemy ( DIRECTORY 4.code_sql_alchemy)

1.Create file db.py:

from flask_sqlalchemy import SQLAlchemy
db = SQLAlchemy()
initiate db to the application in the app.py
if __name__ == '__main__':
    db.init_app(app)
    app.run(debug=True, port=5000)

set configuration for db:
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

2. Correct ItemModel and UserModel
set table names
columns for both Models (tables)
set id for ItemModel also as it was for UserModel

3. Correct create_table.py:

add id for item
create new db : python create_tables.py

4. Implementing ItemModel using SQLAlchemy (video 98):
4.1. Change ItemModel using SQLAlchemy
4.2. Update Resources in accordance with above changes
4.3 Longtime debugging before everything works

5. Implementing UserModel using SQLAlchemy (video 99):
5.1. update classmethods - find_by_username and find_by_id
5.2. implement method save_to_db
5.3. update code of class UserRegister(Resource) - method post.

6.Update ItemList (video 100)

7. Delete create_tables.py (video 101)
Make sqlalchemy create db itself in app.py
@app.before_first_request
def create_tables():
    db.create_all()
As soon as you make first request new DB and all the models are created
before the first request.

8. Creating a new Model: StoreModel ( video 102):
8.1. Store -  a shop where are stored items
Each item has 1 store, but each store has many items
(relation one to many) - one store to many items.
8.2 Update class Item(Resource) -  add new argument store_id in the parser,
add field store_id in the methods post and put.

8.2. add store_id field for ItemModel.

9. Creating new Resources in models/store.py: Store, StoreList ( video 103)
Add them to app.py

10. Final testing of the created API (video 104)


